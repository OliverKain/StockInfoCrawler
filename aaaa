/**
 * FKSR005.java
 * All Rights Reserved.Copyright　2018,Energia　Communications.Inc
 */
package jp.co.energia.batch.FKSR;

import java.io.File;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import jp.co.energia.batch.common.dao.CommonDAO;
import jp.co.energia.batch.common.module.CommonModule;
import jp.co.energia.batch.constants.Constants;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

/**
 * 期末建物調書。.
 * Ver.00.00.00 2018/4/26 : AIT-Myhq - Original
 */
public class FKSR005 {

    /** 帳票ID（期末建物調書）. */
    public static final String REPORT_ID = "FKSR015";
	/** 帳票種別. */
	private static final String CHOHY_SBT = "15";
	/** テンプレートファイル名. */
	private static final String TEMPLATE_FILE_NAME = "FKSR015.jasper";
	/** DEC_FORMAT. */
	private static final String DEC_FORMAT = "###,###,###,##0.00";

	/** コンストラクタ. */
	public FKSR005() { };

	/**
	 * 帳票ファイルの作成を行います。.
	 * @param dao DAO
	 * @throws Exception 例外
	 */
	public void makePintFile(CommonDAO dao) throws Exception {
		// 帳票作成日時（yyyyMMddHHmmss）取得
		String timeStr = (new SimpleDateFormat(Constants.DATE_FORMAT_YYYYMMDDHHMMSS)).format(new Date());
		// 帳票登録日時（yyyyMMddHHmmssSSS）取得
		String trkTime = (new SimpleDateFormat(Constants.DATE_FMT_YYYYMMDDHHMMSSSSS)).format(new Date());
		List<Map<String, Object>> paramList = createParamList(dao);
		exportPDF(dao, timeStr, trkTime, paramList);
	}

	/**
	 * Create param list for exporting.
	 * @param dao DAO
	 * @return current page
	 * @throws Exception 例外
	 */
	private List<Map<String, Object>> createParamList(CommonDAO dao) throws Exception {
		// Param list for exporting
		List<Map<String, Object>> paramList = new ArrayList<Map<String, Object>>();
		// ヘッダー部分の取得
		List<Map<String, Object>> sql01Result = dao.getQueryResult(new HashMap<String, Object>(), "FKSR015_SELECT_001");
		// Page index
		int pageIdx = 0;
		int totalPage = sql01Result.size();
		for (Map<String, Object> sql01Row : sql01Result) {
			// Page index
			pageIdx++;
			// Page map
			Map<String, Object> page = new HashMap<String, Object>();
			// 明細行の編集
			page.putAll(getTitlePart(sql01Row, pageIdx, totalPage));
			// 明細部分の取得
			Map<String, Object> param = new HashMap<String, Object>();
			param.put("CHOHY_RNO_W01", sql01Row.get("CHOHY_RNO"));
			List<Map<String, Object>> sql02Result = dao.getQueryResult(param, "FKSR015_SELECT_002");
			// 明細部の編集
//			page.putAll(getDetailPart(sql02Result));
			// フッター部の編集
			page.putAll(getFooterPart(sql01Row));
			// Add detail into paramlist
			paramList.add(page);
		}

		return paramList;
	}

	/**
	 *
	 * @param dao DAO
	 * @param timeStr 帳票作成日時（yyyyMMddHHmmss）取得
	 * @param trkTime 帳票登録日時（yyyyMMddHHmmssSSS）取得
	 * @param paramList Params of report
	 * @throws Exception 例外
	 */
	private void exportPDF(CommonDAO dao, String timeStr, String trkTime, List<Map<String, Object>> paramList)
			throws Exception {
		//出力先フォルダ
		String outFolder = Constants.CHOHY_DIR_PATH + File.separator + REPORT_ID + File.separator + timeStr;
		//帳票格納フォルダが存在しない場合作成
		CommonModule.createFolder(outFolder);
		// 出力先ファイルを指定する。
		String outFile = outFolder + File.separator + getFileID(timeStr);
		// テンプレートファイル名を取得する。
		String templateFileName = Constants.TEMPLATE_DIR_PATH + File.separator + TEMPLATE_FILE_NAME;
		// 出力ファイルが正常に作成できていること。
		JasperPrint jasper = JasperFillManager.fillReport(templateFileName,
				new HashMap<String, Object>(), new JRBeanCollectionDataSource(paramList));
		// 印刷イメージをPDFファイルに出力する。
		JasperExportManager.exportReportToPdfFile(jasper, outFile + ".pdf");
		//DB登録
		Map<String, Object> repInfo = new HashMap<String, Object>();
		repInfo.put("CHOHY_ID"		, REPORT_ID);
		repInfo.put("CHOHY_PASS"	, outFile + ".pdf");
		repInfo.put("TOK_DATE"		, trkTime);
		repInfo.put("KKSH_CD"		, "QA");
		repInfo.put("SFSK_CD"		, "QA");
		repInfo.put("CHOHY_SBT"		, CHOHY_SBT);
		repInfo.put("BATCH_ID"		, "QA");
		CommonModule.creMakeRep(dao, repInfo);
	}

	/**
	 * 見出し部を取得します。.
	 * @param record SQL01 record
	 * @param currPage Current page
	 * @param totalPage Total page
 	 * @return 見出し部
	 */
	private Map<String, Object> getTitlePart(Map<String, Object> record, int currPage, int totalPage) {
		Map<String, Object> titlePart = new HashMap<String, Object>();
		// 送付先
		titlePart.put("FKSR015_001", record.get("SFSK_CD"));
		// 送付先名
		titlePart.put("FKSR015_002", record.get("SFSK_NAME"));
		// 台帳管理箇所
		titlePart.put("FKSR015_003", record.get("DAI_KKSH_NAME"));
		// 現物管理箇所
		titlePart.put("FKSR015_004", record.get("GNB_KKSH_NAME"));
		// 取引タイプ種別
		titlePart.put("FKSR015_005", record.get("TRHK_TYP_SBT_NAME"));
		// 原価センタコード
		titlePart.put("FKSR015_006", record.get("SEKN_GENK_CTR_NAME"));
		// 現在年月
		titlePart.put("FKSR015_007", CommonModule.formatJPKanjiMonth(CommonModule.cnvStr(record.get("NOW_DATE"))));
		// 現在頁
		titlePart.put("FKSR015_008", Integer.toString(currPage));
		// 全頁
		titlePart.put("FKSR015_009", Integer.toString(totalPage));
		return titlePart;
	}

	/**
	 * 見出し部を取得します。.
	 * @param record SQL01 record
 	 * @return 見出し部
	 */
	private Map<String, Object> getFooterPart(Map<String, Object> record) {
		Map<String, Object> footerPart = new HashMap<String, Object>();

		// 送付先
		footerPart.put("FKSR015_601", record.get("CMPY_NAME"));

		return footerPart;
	}

	/**
	 * ファイルIDを作成します。.
	 * ファイルID = 帳票ID_日付(年月日時分秒)
	 * @param timeStr 帳票作成日時
	 * @return ファイルID
	 */
	private String getFileID(String timeStr) {
		String fileId = REPORT_ID + "_" + timeStr;
		return fileId;
	}

	/**
	 * Format Number: "###,###,###,##0.00".
	 * @param num input number
	 * @return formatted number
	 */
	private String formatDecNum(BigDecimal num) {
		return CommonModule.decimalFormat(num, DEC_FORMAT);
	}

	/**
	 * Format Number: "###,###,###,##0".
	 * @param num input number
	 * @return formatted number
	 */
	private String formatNum(BigDecimal num) {
		return CommonModule.decimalFormat(num, Constants.NUMBER_FORMAT);
	}

	/**
	 * Get number from object.
	 * @param obj object
	 * @return BigDecimal number
	 */
	private BigDecimal getNum(Object obj) {
		return new BigDecimal(CommonModule.cnvStr(obj).replaceAll(Constants.COMMA, Constants.BLANK));
	}
}
